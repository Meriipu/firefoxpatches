From 5be4471e2c709f2e0689707a8f21f18d9e07db11 Mon Sep 17 00:00:00 2001
From: Meriipu <Meriipu@users.noreply.github.com>
Date: Fri, 17 Dec 2021 15:36:08 +0100
Subject: [PATCH 01/10] restore click-selection behaviour to urlbar and
 searchbar

* doubleclicking selects all
* singleclicking selects nothing

esr115
---
 browser/components/search/content/searchbar.js | 10 +++++++++-
 browser/components/urlbar/UrlbarInput.sys.mjs  | 15 ++++++++++-----
 2 files changed, 19 insertions(+), 6 deletions(-)

diff --git a/browser/components/search/content/searchbar.js b/browser/components/search/content/searchbar.js
index e8b2dd50450c..e139fc69b36b 100644
--- a/browser/components/search/content/searchbar.js
+++ b/browser/components/search/content/searchbar.js
@@ -459,7 +459,8 @@
         document.activeElement == this._textbox &&
         this._textbox.selectionStart == this._textbox.selectionEnd
       ) {
-        this.select();
+        //this.select();
+        this._textbox.editor.selectsAll();
       }
     }
 
@@ -564,6 +565,13 @@
           // is text in the textbox.
           this.openSuggestionsPanel(true);
         }
+
+        // select everything (doubleclick)
+        if (event.detail == 2)
+        {
+          this._textbox.editor.selectAll();
+          event.preventDefault();
+        }
       });
     }
 
diff --git a/browser/components/urlbar/UrlbarInput.sys.mjs b/browser/components/urlbar/UrlbarInput.sys.mjs
index 51b822759be3..e359676b2784 100644
--- a/browser/components/urlbar/UrlbarInput.sys.mjs
+++ b/browser/components/urlbar/UrlbarInput.sys.mjs
@@ -3173,14 +3173,16 @@ export class UrlbarInput {
    * Determines if we should select all the text in the Urlbar based on the
    *  Urlbar state, and whether the selection is empty.
    */
-  _maybeSelectAll() {
+  _maybeSelectAll(ignoreClickSelectsAllPref = false) {
     if (
       !this._preventClickSelectsAll &&
+      ignoreClickSelectsAllPref &&
       this._compositionState != lazy.UrlbarUtils.COMPOSITION.COMPOSING &&
       this.document.activeElement == this.inputField &&
       this.inputField.selectionStart == this.inputField.selectionEnd
     ) {
-      this.select();
+      //this.select();
+      this.editor.selectAll();
     }
   }
 
@@ -3309,7 +3311,7 @@ export class UrlbarInput {
       return;
     }
 
-    this._maybeSelectAll();
+    this._maybeSelectAll(/* ignoreClickSelectsAllPref */ event.button == 2);
   }
 
   _on_focus(event) {
@@ -3348,7 +3350,7 @@ export class UrlbarInput {
     if (this.focusedViaMousedown) {
       this.view.autoOpen({ event });
     } else if (this.inputField.hasAttribute("refocused-by-panel")) {
-      this._maybeSelectAll();
+      this._maybeSelectAll(true); // not sure what true here does
     }
 
     this._updateUrlTooltip();
@@ -3409,7 +3411,10 @@ export class UrlbarInput {
           this.inputField.setSelectionRange(0, 0);
         }
 
-        if (event.target.id == SEARCH_BUTTON_ID) {
+        if (event.detail == 2) { // double click selects all
+          this.editor.selectAll();
+          event.preventDefault();
+        } else if (event.target.id == SEARCH_BUTTON_ID) {
           this._preventClickSelectsAll = true;
           this.search(lazy.UrlbarTokenizer.RESTRICT.SEARCH);
         } else {
-- 
2.42.1

